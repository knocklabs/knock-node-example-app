// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens         Token[]
  sessions       Session[]
  Workspace_seat Workspace_seat[]
  projectMembers Project_member[]
  Asset          Asset[]
  Comment        Comment[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Workspace {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  slug           String           @unique
  seats          Workspace_seat[]
  projects       Project[]
  projectMembers Project_member[]
  Asset          Asset[]
  Comment        Comment[]
}

model Workspace_seat {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Project {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String
  workspace    Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId  Int
  slackChannel String?
  members      Project_member[]
  assets       Asset[]
  comments     Comment[]
}

model Project_member {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Asset {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  name        String
  description String
  url         String
  comments    Comment[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  asset       Asset     @relation(fields: [assetId], references: [id])
  assetId     Int
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  text        String
}
